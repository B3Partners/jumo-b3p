<project name="jump" default="test" basedir=".">
    <description>
Simple build file. You will need ant.jar and junit.jar in your classpath in order to use this file.
	
Target directory structure:

bin/ - common binaries, scripts (place on path)
doc/ - Hand crafted documentation
javadoc/ - generated javadoc code (which your docs can link to)
lib/ - imported Java libraries go in to this directory
build/classes/ - This is the tree for building; Ant creates it and can empty it in the 'clean' project.
build/tests/ - junit test cases are compiled in separate subdirectory
build/logs - logs for cruisecontrol go here
build/resutls - xml test results for cruisecontrol go here
build/dist/ - Distribution outputs go in here; the directory is created in Ant and clean empties it out
build/dist/lib/ - required runtime jars go here, including generated timestamped jar	
dist/ - zipped distribution archives go here
build.xml - this file
    </description>
    
	<!-- GLOBAL PROPERTIES -->
	<property name="build.compiler.emacs" value="true"/>
	<property name="cvs.repository" value=":pserver:${user.name}@conflate.refractions.net:/home/cvs/" /> 
  	<property name="cvs.package"    value="jump" />
	<property name="cvs.basedir"    value="../" />
  
	<!-- project directories -->
	<property name="src"        location="."/>
	<property name="buildroot"  location="build"/>

	<property name="build"      location="${buildroot}/classes"/>
	<property name="testbuild"  location="${buildroot}/tests"/>  
	<property name="distbuild"  location="${buildroot}/dist"/>  	
	<property name="dist"       location="dist"/>
	<property name="lib"        location="lib"/>
	<property name="test"       location="test"/>
	<property name="doc"        location="doc"/>
	<property name="javadoc"    location="javadoc"/>

	<property name="bin"        location="bin"/>
	<property name="results"    location="${buildroot}/results"/>	
	<property name="logs"       location="${buildroot}/logs"/>


	
	<!-- paths -->
	<path id="buildpath" >
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
	</path>	
	<path id="distpath" >
		<fileset dir="lib">
        	<include name="*.jar"/>

	        <exclude name="junit*.jar"/>
	        <exclude name="ant*.jar"/>        
		</fileset>
	</path>
	<path id="testpath" >	
		<pathelement location="${build}" />
		<pathelement location="${testbuild}" />
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>                
	</path> 
	  
	<!-- TARGETS -->

	<target name="init">
		<tstamp/>
		<!-- Create the build directory structure used by build -->
		<mkdir dir="${buildroot}"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${distbuild}"/>
		<mkdir dir="${logs}"/>		
		<mkdir dir="${dist}"/>		
	</target>

	<target name="clean"
			description="clean out the output directories" >
		<!-- Delete the ${buildroot} and ${dist} directory trees -->
		<delete dir="${buildroot}"/>
		<delete dir="${dist}"/>
		<delete dir="${javadoc}"/>
		<delete file="${release}.zip"/>
	</target>

	<target name="compile" depends="init"
			description="compile application without cleaning">

	    <javac srcdir="${src}"
	           destdir="${build}"
		   	   classpathref="buildpath"
	   		   deprecation="off"
	           debug="on"
	           source="1.3"
	           target="1.3"
	           nowarn="off"/>
		<copy todir="${build}">
			<fileset dir="${src}" includes="com, org">
				<!-- don't copy java or javadoc support files -->
				<exclude name="doc"/>
				<exclude name="build"/>
				<exclude name="dist/"/>
				<exclude name="javadoc"/>
				<exclude name="doxygen"/>
				<exclude name="**/package.html"/>
				<exclude name="**/overview.html"/>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>	           
	</target>	
	
	<target	name="docs" 
			description="generate javadocs" >			
		<mkdir dir="${javadoc}"/>

		<javadoc destdir="${javadoc}"
		         author="true"
		         package="true"
		         version="true"
		         splitindex="true"
		         use="true"		       
		         windowtitle="JUMP v1.1.0 API"
		         overview="overview.html"
		         classpathref="buildpath">
			
			<doctitle><![CDATA[<h1>JUMP API</h1>]]></doctitle>
            <header><![CDATA[<b>${ant.project.name}</b><br><font size="-1">v1.1.0</font>]]></header>
			<bottom><![CDATA[<i>Copyright &#169; 2003 Vivid Solutions Inc. All Rights Reserved.</i>]]></bottom>
			<tag name="todo" scope="all" description="To do:" />
			<tag name="hack" scope="all" description="Hack:" />
			<tag name="bug" scope="all"  description="Bug:" />	 				
			<link href="http://www.vividsolutions.com/jcs/javadoc/"/>
            <link href="http://www.vividsolutions.com/jts/javadoc/"/>
            <packageset dir = '.' defaultexcludes='yes'>
              <include name = "com/vividsolutions/**"/>
              <include name = "org/**"/>
            </packageset>
            		
		</javadoc>		
	</target>

	<target name="test.init">
		<mkdir dir="${testbuild}"/>		
		<mkdir dir="${results}"/>
		<mkdir dir="${test}"/>				
	</target>

	<target name="test.compile" depends="compile, test.init">        
	    <javac srcdir="${test}"
	           destdir="${testbuild}"
		   	   classpathref="testpath"
	   		   deprecation="on"
	           debug="on"
	           nowarn="off">
	    </javac>
	</target>
	
	<target name="test" depends="test.compile"
			description="run the junit tests">			
	    <junit 	printsummary="no"
	    		showoutput="no"
	    		filtertrace="on"
			haltonfailure="yes">
			<classpath>
				<pathelement location="${build}" />
				<pathelement location="${testbuild}" />
				<fileset dir="lib">
					<include name="*.jar"/>
				</fileset> 			    
			</classpath>
					
			<formatter type="brief" usefile="false"/>
			<formatter type="xml"/>			
			<batchtest fork="yes" todir="${results}">
				<fileset dir="${test}">

				  <include name="**/*Test*.java"/>
				  <exclude name="**/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>		
	</target>

	<target name="release-init">
		<mkdir dir="${dist}"/>
		<mkdir dir="${distbuild}"/>		
		<mkdir dir="${distbuild}/lib"/>

	</target>
	
	<target name="jar" depends="compile,test,release-init">
		<jar jarfile="${distbuild}/lib/${ant.project.name}.jar"
			basedir="${build}"/>
	    <jar jarfile="${distbuild}/lib/src-${DSTAMP}.jar"
			basedir="${src}"/>
	</target>
    
    <!-- Can probably optimize most of the release directory away -->
	<target name="release" depends="release-init, jar, docs"
    	    description="Generate the distribution" >    
    	<copy todir="${distbuild}/doc">
     		<fileset dir="${doc}"/>

	    </copy>
    	<copy todir="${distbuild}/bin">
	    	<fileset dir="${bin}"/>
	    </copy>
	    <copy todir="${distbuild}/lib">
	    	<fileset dir="${lib}">
	    		<exclude name="ant*.jar"/>
	    		<exclude name="junit*.jar"/>    		
	    	</fileset>

	    </copy>
	    <zip destfile="${dist}/${ant.project.name}-${DSTAMP}.zip" basedir="${distbuild}" />
	</target>

	<target name="all" depends="clean,init,compile,test,jar"
		    description="Build application" />
		    
	<target name="checkout"
			description="Update package from CVS">
			
		<cvs cvsroot="${cvs.repository}" package="${cvs.package}" dest="${cvs.basedir}" />
  	</target>
  	
	<target name="masterbuild" depends="checkout,compile,test,release"
  	        description="Cruise control master build" /> 
  	        
	<target name="cleanbuild" depends="clean,masterbuild"
  	      	description="Cruise control clean build" /> 
  

</project>
